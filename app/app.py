import streamlit as st
import pandas as pd
import joblib

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ scaler
model = joblib.load('app/heart_disease_model.pkl')
scaler = joblib.load('app/scaler.pkl')

st.title("‚ù§Ô∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∏—Å–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è")

st.markdown("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")

# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
age = st.slider('–í–æ–∑—Ä–∞—Å—Ç', 20, 100, 50, help="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö.")
sex = st.radio('–ü–æ–ª', [0, 1], format_func=lambda x: '–ñ–µ–Ω—â–∏–Ω–∞' if x == 0 else '–ú—É–∂—á–∏–Ω–∞',
               help="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª.")
cp = st.selectbox(
    '–¢–∏–ø –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏', 
    [1, 2, 3, 4], 
    format_func=lambda x: {
        1: "–ê–Ω–≥–∏–Ω–æ–∑–Ω–∞—è –±–æ–ª—å –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ",
        2: "–ë–æ–ª—å –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π",
        3: "–ù–µ–∞–Ω–≥–∏–æ–∑–Ω–∞—è –±–æ–ª—å",
        4: "–ë–æ–ª—å –±–µ–∑ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"
    }[x],
    help="–¢–∏–ø—ã –±–æ–ª–µ–π –≤ –≥—Ä—É–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å —Ä–∞–±–æ—Ç–æ–π —Å–µ—Ä–¥—Ü–∞."
)
trestbps = st.slider('–î–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–∫–æ–µ', 80, 200, 120, help="–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è (–º–º —Ä—Ç. —Å—Ç.).")
chol = st.slider('–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω', 100, 600, 200, help="–£—Ä–æ–≤–µ–Ω—å –æ–±—â–µ–≥–æ —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞ –≤ –∫—Ä–æ–≤–∏ (–º–≥/–¥–ª).")
fbs = st.radio(
    '–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –Ω–∞—Ç–æ—â–∞–∫ >120 –º–≥/–¥–ª', 
    [0, 1], 
    format_func=lambda x: '–ù–µ—Ç' if x == 0 else '–î–∞',
    help="–ë—ã–ª –ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ –≤—ã—à–µ 120 –º–≥/–¥–ª –ø—Ä–∏ —Å–¥–∞—á–µ –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–∞—Ç–æ—â–∞–∫."
)
restecg = st.selectbox(
    '–≠–ö–ì –≤ –ø–æ–∫–æ–µ', 
    [0, 1, 2], 
    format_func=lambda x: {
        0: "–ù–æ—Ä–º–∞",
        1: "–ê–Ω–æ–º–∞–ª–∏—è ST-T",
        2: "–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è –ª–µ–≤–æ–≥–æ –∂–µ–ª—É–¥–æ—á–∫–∞"
    }[x],
    help="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–¥–∏–æ–≥—Ä–∞–º–º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è."
)
thalach = st.slider('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å', 60, 220, 150, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π –ø—É–ª—å—Å –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ (—É–¥/–º–∏–Ω).")
exang = st.radio(
    '–°—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ', 
    [0, 1], 
    format_func=lambda x: '–ù–µ—Ç' if x == 0 else '–î–∞',
    help="–ü–æ—è–≤–ª—è–ª–∞—Å—å –ª–∏ —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è –ø—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ."
)
oldpeak = st.slider(
    '–î–µ–ø—Ä–µ—Å—Å–∏—è ST', 
    0.0, 6.2, 0.0, step=0.1, 
    help="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–µ–ø—Ä–µ—Å—Å–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ ST –Ω–∞ –≠–ö–ì, –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ –º–º."
)
slope = st.selectbox(
    '–ù–∞–∫–ª–æ–Ω —Å–µ–≥–º–µ–Ω—Ç–∞ ST', 
    [1, 2, 3], 
    format_func=lambda x: {
        1: "–í–æ—Å—Ö–æ–¥—è—â–∏–π",
        2: "–ü–ª–æ—Å–∫–∏–π",
        3: "–ù–∏—Å—Ö–æ–¥—è—â–∏–π"
    }[x],
    help="–§–æ—Ä–º–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ ST –Ω–∞ –≠–ö–ì, –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–¥—Ü–∞."
)
ca = st.slider(
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–ø–Ω—ã—Ö —Å–æ—Å—É–¥–æ–≤ (0-3)', 
    0, 3, 0, 
    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–ø–Ω—ã—Ö —Å–æ—Å—É–¥–æ–≤, –æ–∫—Ä–∞—à–µ–Ω–Ω—ã—Ö —Ñ–ª—é–æ—Ä–æ—Å–∫–æ–ø–∏–µ–π."
)
thal = st.selectbox(
    '–¢–∞–ª–∞—Å—Å–µ–º–∏—è', 
    [3, 6, 7], 
    format_func=lambda x: {
        3: "–ù–æ—Ä–º–∞",
        6: "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç",
        7: "–û–±—Ä–∞—Ç–∏–º—ã–π –¥–µ—Ñ–µ–∫—Ç"
    }[x],
    help="–¢–∏–ø —Ç–∞–ª–∞—Å—Å–µ–º–∏–∏ ‚Äî –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∫—Ä–æ–≤–∏, –≤–ª–∏—è—é—â–µ–≥–æ –Ω–∞ –≥–µ–º–æ–≥–ª–æ–±–∏–Ω."
)
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
input_data = pd.DataFrame({
    'age': [age], 'sex': [sex], 'cp': [cp], 'trestbps': [trestbps], 'chol': [chol],
    'fbs': [fbs], 'restecg': [restecg], 'thalach': [thalach],
    'exang': [exang], 'oldpeak': [oldpeak], 'slope': [slope], 'ca': [ca], 'thal': [thal]
})

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
numeric_features = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak', 'ca']
input_data[numeric_features] = scaler.transform(input_data[numeric_features])

# One-Hot –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
input_encoded = pd.get_dummies(input_data).reindex(columns=model.feature_names_in_, fill_value=0)

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if st.button('üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å'):
    pred = model.predict(input_encoded)
    proba = model.predict_proba(input_encoded)[0, 1]

    st.subheader("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:")

    if proba >= 0.7:
        st.error(f"‚ùó **–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –±–æ–ª–µ–∑–Ω–∏ —Å–µ—Ä–¥—Ü–∞**\n\nüî¥ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: **{proba:.2%}**\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É!")
    elif proba >= 0.4:
        st.warning(f"‚ö†Ô∏è **–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫**\n\nüü† –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: **{proba:.2%}**\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.")
    else:
        st.success(f"‚úÖ **–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫**\n\nüü¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: **{proba:.2%}**\n\n–í—Å—ë —Ö–æ—Ä–æ—à–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏!")
